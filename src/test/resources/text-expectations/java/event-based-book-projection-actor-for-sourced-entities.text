package io.vlingo.infrastructure.persistence;

import io.vlingo.infrastructure.Events;
import io.vlingo.xoomapp.infrastructure.BookData;
import io.vlingo.xoomapp.model.book.BookState;

import io.vlingo.lattice.model.projection.Projectable;
import io.vlingo.lattice.model.projection.StateStoreProjectionActor;
import io.vlingo.symbio.Source;

/**
 * See
 * <a href="https://docs.vlingo.io/vlingo-lattice/projections#implementing-with-the-statestoreprojectionactor">
 *   StateStoreProjectionActor
 * </a>
 */
public class BookProjectionActor extends StateStoreProjectionActor<BookData> {

  public BookProjectionActor() {
    super(QueryModelStateStoreProvider.instance().store);
  }

  @Override
  protected BookData currentDataFor(final Projectable projectable) {
    return BookData.empty();
  }

  @Override
  protected BookData merge(BookData previousData, int previousVersion, BookData currentData, int currentVersion) {

    if (previousData == null) {
      previousData = currentData;
    }

    for (final Source<?> event : sources()) {
      switch (Events.valueOf(event.typeName())) {
        case BookSoldOut:
          return BookData.empty();   // TODO: implement actual merge
        case BookPurchased:
          return BookData.empty();   // TODO: implement actual merge
        default:
          logger().warn("Event of type " + event.typeName() + " was not matched.");
          break;
      }
    }

    return previousData;
  }
}
