package io.vlingo.xoomapp.infrastructure;

import io.vlingo.xoomapp.resource.BookResource;
import io.vlingo.xoomapp.resource.AuthorResource;
import io.vlingo.xoomapp.infrastructure.persistence.ProjectionDispatcherProvider;
import io.vlingo.xoomapp.infrastructure.persistence.QueryModelStateStoreProvider;
import io.vlingo.xoomapp.infrastructure.persistence.CommandModelStateStoreProvider;
import io.vlingo.lattice.model.stateful.StatefulTypeRegistry;

import io.vlingo.actors.Grid;
import io.vlingo.cluster.model.Properties;
import io.vlingo.common.identity.IdentityGeneratorType;
import io.vlingo.http.resource.Configuration.Sizing;
import io.vlingo.http.resource.Configuration.Timing;
import io.vlingo.http.resource.Resources;
import io.vlingo.http.resource.Server;

public class Bootstrap {

  private final Grid grid;
  private final Server server;
  private static Bootstrap instance;

  public Bootstrap(final String nodeName) throws Exception {
    grid = Grid.start("xoom-app", nodeName);

    final StatefulTypeRegistry statefulTypeRegistry = new StatefulTypeRegistry(grid.world());
    QueryModelStateStoreProvider.using(grid.world().stage(), statefulTypeRegistry);
    CommandModelStateStoreProvider.using(grid.world().stage(), statefulTypeRegistry, ProjectionDispatcherProvider.using(grid.world().stage()).storeDispatcher);

    final AuthorResource authorResource = new AuthorResource(grid);
    final BookResource bookResource = new BookResource(grid);

    Resources allResources = Resources.are(
        authorResource.routes(),
        bookResource.routes()
    );

    server = Server.startWith(grid.world().stage(), allResources, resolveServerPort(nodeName), Sizing.define(), Timing.define());

    Runtime.getRuntime().addShutdownHook(new Thread(() -> {
      if (instance != null) {
        instance.server.stop();

        System.out.println("\n");
        System.out.println("=========================");
        System.out.println("Stopping xoom-app.");
        System.out.println("=========================");
      }
    }));

    grid.quorumAchieved();
  }

  void stopServer() throws Exception {
    if (instance == null) {
      throw new IllegalStateException("xoom-app server not running");
    }
    instance.server.stop();
  }

  private int resolveServerPort(final String nodeName) {
    final int port = Properties.instance.getInteger(nodeName, "server.port", 19090);
    System.out.println(nodeName + " server running on " + port);
    return port;
  }

  public static void main(final String[] args) throws Exception {
    System.out.println("=========================");
    System.out.println("service: xoom-app.");
    System.out.println("=========================");

    instance = new Bootstrap(parseNodeName(args));
  }

  private static String parseNodeName(final String[] args) {
    if (args.length == 0) {
      System.err.println("The node must be named with a command-line argument.");
      System.exit(1);
    } else if (args.length > 1) {
      System.err.println("Too many arguments; provide node name only.");
      System.exit(1);
    }
    return args[0];
  }
}
